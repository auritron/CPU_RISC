1. Plan on what instructions to add. Instructions planned till now-
LOAD, SEND, COPY, ADD, SUB, MUL, DIV, NOT, AND, OR, XOR, SET, STL, STR, RTL, RTR, CMP, GOTO, WEQ, WGT, WLT
Instructions considered-
CALL,  RET

2. Define Syntax-
> '>' repesents instruction being performed on a register (eg. NOT R1 > R2)
> '/' represents bit location (eg. s1/r1/bit1)
> '&' represents relating multiple units in an operation (eg. ADD R1 & R2 > R3)
> '=' represents assigment (eg. SET R1/bit1 = 0 [sets bit1 in R1 as 0]) 
> '()' represebts grouping and identifier precidence (eg. (R1 AND R2) OR R3 > R4)
> ',' represents range of bits (eg. SETA R1/bit1,bit2 = 1 [sets all bits from bit1 to bit2(inclusive) to 1, also SETA stands for SETALL])
> '#' represents comments (ignored by the program)
> '%' represents immediate values (eg. %15 is converted to binary as 0000 0000 0000 1111 and then operated upon)
> '@' represents a label which can be jumped back to by the program(eg. @LABEL_1). Needs to be followed be '[]' where the code shall be executed.
> 'f(FLAG)' returns the value of the flag currently as either 0 or 1 depending upon how it is (FLAG = 'Z','S','C','O')

3. Define flags-
> Zero flag(Z) - Set to 1 if RESULT equals 0, set to 0 if RESULT does not equal 0.
> Sign flag(S) - Set to 1 if RESULT is negative. set to 0 if RESULT is positive.
> Carry flag(C) - Set to 1 if RESULT after addition has an extra carry unit, or RESULT requires a borrow unit is subtraction. ONLY for UNSIGNED arithmetic.
> Overflow flag(O) - Set to 1 if RESULT after addition has an extra overflow unit, or RESULT requires a borrow unit is subtraction. ONLY for SIGNED arithmetic.

4. Set and detect flags and labels depending on instructions-
> CMP r1 & r2:-
- Z = 0, S = 0 (r1 > r2)
- Z = 1, S = 0 (r1 = r2)
- Z = 0, S = 1 (r1 < r2)
- RETURN error if Z and S flag are both equal to 1.
> GOTO @LABEL:- Goes back to the level unconditionally
Conditionals:-
- WEQ @LABEL:- Goes to LABEL if f(Z) = 1 [equal to]
- NOT WEQ @LABEL:- Goes to LABEL if f(Z) = 0 [not equal to]
- WGT @LABEL:- Goes to LABEL if f(Z) = 0 and f(S) = 0 [greater than]
- NOT WGT @LABEL:- Goes to LABEL if f(Z) = 1 or f(S) = 1 [greater than or equal to]
- WLT @LABEL:- Goes to LABEL if f(Z) = 0 and f(S) = 1 [less than]
- NOT WLT @LABEL:- Goes to LABEL if f(Z) = 1 or f(S) = 0 [less than or equal to]
- WCY @LABEL:- Goes to LABEL if f(C) = 1 [carry flag is true] 

5. Tokenizer- 
Tokenize the input cmds by the user. Create a 2D array, containing the list of tokens for each input. If there is a new line in the input, create a new list.
Then, tokenize that input. For all identifiers in a single line, an inner list will tokenize them. If the instruction 'RUN' is detected, the tokenization process stops.
After that, interpretation and error handling begins.

6. Interpretation and Error handling-
- Check first token
- Correspond to correct Syntax
